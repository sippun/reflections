What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository a /.git folder is created in your directory. 
The repository has no inital commit. A repository needs to be initialized 
because then you can start using version control in your directory.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory and repository in that
files in the staging area are on a temporary hold to be added to the repository.
Since changes are put into the staging area and not committed immediately, an
accidental commit is less likely to happen. It also lets you control more finely
what to commit.


How can you use the staging area to make sure you have one commit per logical
change?

You can review what's in the staging area with diff to see what you're about to
commit so you can make sure it's not too big or small.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful when making experimental changes or features, creating
different versions of your code for whatever reason, and basically any change
you don't consider linearly contributing to the codebase. Branches help by
letting you navigate and track these changes with labels, history, and structure
that make it easier to conceptualize what's going on in the big picture.


How do the diagrams help you visualize the branch structure?

The diagrams help me understand the branch structure by allowing me to
understand how commits "see" their parents and what kind of connection exist
between them based on the direction of the arrows. This lets me see how the
branches break off at points in the code history and how a commit can be
detached.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged together, the changes made since the two diverged
are added together into a new version that contains changes made in both
branches. The way it is represented in the diagram shows that the history of
changes in both branches come together into a new commit.
